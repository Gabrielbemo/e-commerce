services:
  postgres:
    container_name: ms_pg_sql
    image: postgres
    environment:
      POSTGRES_USER: gabriel
      POSTGRES_PASSWORD: gabriel
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - microservices-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"

  pgadmin:
    container_name: ms_pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - microservices-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"

  mongodb:
    container_name: ms-mongo-db
    image: mongo
    ports:
      - 27017:27017
    volumes:
      - mongo:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=gabriel
      - MONGO_INITDB_ROOT_PASSWORD=gabriel
    networks:
      - microservices-net
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"

  mongo-express:
    container_name: mongo_express
    image: mongo-express
    depends_on:
      - mongodb
    restart: unless-stopped
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_BASICAUTH_USERNAME=gabriel
      - ME_CONFIG_BASICAUTH_PASSWORD=gabriel
      - ME_CONFIG_MONGODB_ADMINUSERNAME=gabriel
      - ME_CONFIG_MONGODB_ADMINPASSWORD=gabriel
      - ME_CONFIG_MONGODB_URL=mongodb://gabriel:gabriel@ms_mongo_db:27017
    networks:
      - microservices-net
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - microservices-net
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ms_kafka
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    networks:
      - microservices-net
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"

  mail-dev:
    container_name: ms_mail_dev
    image: maildev/maildev
    ports:
      - 1080:1080
      - 1025:1025
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - 9411:9411
    networks:
      - microservices-net
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"

  keycloak:
    container_name: keyclock-ms
    image: quay.io/keycloak/keycloak:24.0.2
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: "start-dev"
    ports:
      - "9098:8080"
    networks:
      - microservices-net
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"

  config-server:
    container_name: ms-config-server
    build: ./services/config-server
    ports:
      - "8888:8888"
    networks:
      - microservices-net
    restart: unless-stopped
    depends_on:
      - postgres
      - mongodb
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  discovery:
    container_name: ms-discovery
    build: ./services/discovery
    ports:
      - "8761:8761"
    networks:
      - microservices-net
    restart: unless-stopped
    depends_on:
      config-server:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  customer:
    container_name: ms_customer
    build: ./services/customer
    ports:
      - "8082:8082"
    networks:
      - microservices-net
    restart: unless-stopped
    depends_on:
      discovery:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  notification:
    container_name: ms_notification
    build: ./services/notification
    ports:
      - "8083:8083"
    networks:
      - microservices-net
    restart: unless-stopped
    depends_on:
      discovery:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  order:
    container_name: ms_order
    build: ./services/order
    ports:
      - "8084:8084"
    networks:
      - microservices-net
    restart: unless-stopped
    depends_on:
      discovery:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  payment:
    container_name: ms_payment
    build: ./services/payment
    ports:
      - "8085:8085"
    networks:
      - microservices-net
    restart: unless-stopped
    depends_on:
      discovery:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  product:
    container_name: ms_product
    build: ./services/product
    ports:
      - "8086:8086"
    networks:
      - microservices-net
    restart: unless-stopped
    depends_on:
      discovery:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  gateway:
    container_name: ms_gateway
    build: ./services/gateway
    ports:
      - "8080:8080"
    networks:
      - microservices-net
    restart: unless-stopped
    depends_on:
      customer:
        condition: service_healthy
      notification:
        condition: service_healthy
      order:
        condition: service_healthy
      payment:
        condition: service_healthy
      product:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"

networks:
  microservices-net:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  mongo:
